name: Solar System Workflow


on:
    workflow_dispatch: 
    push:
        branches:
            - main
            - 'feature/*'
env:
  MONGO_URI: ${{ vars.MONGO_URI }}
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}


jobs:
    Unit-Testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
         MONGO_URI_NP: 'mongodb://localhost:27017/superData'
         MONGO_NP_USERNAME: ${{ vars.MONGO_NP_USERNAME }}
         MONGO_NP_PASSWORD: ${{ secrets.MONGO_NP_PASSWORD}}       
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Setup Nodejs Version - 18
              uses: actions/setup-node@v3
              with:
                node-version: '18'
            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
    

            - name: Install Dependecies
              run: npm install
              
            - name: Unit Testing
              id: nodejs-unittesting-step
              run: npm test 

            - name: Storing the Test Result using Artificat
              if: always()
              uses: actions/upload-artifact@v4
              with:
                name: Mocha-Test-Result
                path: test-results.xml
    code-coverage:
        name: Code Coverage
        needs: Unit-Testing 
        container: 
            image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options: 
                --name mango
        env:
         MONGO_URI_NP: 'mongodb://mango:27017/superData'
         MONGO_NP_USERNAME: ${{ vars.MONGO_NP_USERNAME }}
         MONGO_NP_PASSWORD: ${{ secrets.MONGO_NP_PASSWORD}}             
            
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Repo
              uses: actions/checkout@v4

            #  name: Setup Nodejs Version - 18
            #    uses: actions/setup-node@v3
            #   with:
            #     node-version: '18'
            - name: Cache NPM dependencies
              uses: actions/cache@v4
              with:
                path: node_modules
                key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

            - name: Install Dependecies
              run: npm install
              
            - name: Check Code Coverage
              continue-on-error: true
              run: npm run coverage

            - name: Archive Test Coverage
              uses: actions/upload-artifact@v4
              with:
                name: Code-Coverage-Result
                path: coverage
                retention-days: 5
    docker:
        name: Containerize the Application
        needs: [Unit-Testing, code-coverage]
        runs-on: ubuntu-latest
        steps:
          - name: Checkout Repo
            uses: actions/checkout@v4
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3
  
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3
            with:
             driver: docker-container

          - name: Login to Docker Hub
            uses: docker/login-action@v3
            with:
              username: ${{ vars.DOCKERHUB_USERNAME }}
              password: ${{ secrets.DOCKERHUB_PASSWORD }}
          - name: GHCR Login
            uses: docker/login-action@v3
            with:
              registry: ghcr.io
              username: ${{ github.repository_owner}}
              password: ${{ secrets.GITHUB_TOKEN}} 
          - name: Docker Build and push with cache
            uses: docker/build-push-action@v6
            with:
              context: .
              push: true
              tags: |
                ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}
              platforms: linux/amd64,linux/arm64
              cache-from: type=gha
              cache-to: type=gha,mode=max
      
          - name: Docker Image Testing
            run: |
              docker images
              docker run --name solar-system-app -d \
                 -p 3000:3000 \
                 -e MONGO_URI=$MONGO_URI \
                 -e MONGO_USERNAME=$MONGO_USERNAME \
                 -e MONGO_PASSWORD=$MONGO_PASSWORD \
                 ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

              export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
              echo $IP

              echo Testing Image URL using wget
              wget -q -O - 127.0.0.1:3000/live | grep live

 
    dev-deploy:
        permissions: 
          id-token: write
          contents: write
        needs: docker
        if: contains(github.ref, 'feature/')
        uses: ./.github/workflows/reuse-deploy.yml
        secrets: inherit
        with:
         environment: development
         k8s-manifest-dir: kubernetes/development/

    Dev-integration-testing:
      name: Dev Integration Testing
      needs: dev-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL OUTPUT using CURL and JQ
          env:
            URL: ${{needs.dev-deploy.outputs.application-url}}
          run: |
           echo  $URL
           echo "---------------------------------------" 
           curl https://$URL/live -s -k | jq -r .status | grep -i live
    prod-deploy:

        permissions: 
          id-token: write
          contents: write
        needs: docker
        uses: ./.github/workflows/reuse-deploy.yml
        secrets: inherit
        with:
         environment: Production
         k8s-manifest-dir: kubernetes/production/
        
    prod_integration-testing:
      name: PROD Integration Testing
      needs: prod-deploy
      runs-on: ubuntu-latest
      steps:
        - name: Test URL OUTPUT using CURL and JQ
          env:
            URL: ${{needs.prod-deploy.outputs.application-url}}
          run: |
           echo  $URL
           echo "---------------------------------------" 
           curl https://$URL/live -s -k | jq -r .status | grep -i live
    Reports-Azure-Blob:
     needs: [code-coverage, Unit-Testing]
     name: Uploading reports to Azure Blob storage
     runs-on: ubuntu-latest
     continue-on-error: true
     steps:
      - name: Downloading Unit Test Artificat
        uses: actions/download-artifact@v4
        with:
         name: Mocha-Test-Result

      - name: Download Code coverage result 
        uses: actions/download-artifact@v4
        with:
         name: Code-Coverage-Result

      - name: Merging the test results
        run: |
         ls -lrt
         mkdir reports-${{ github.sha }}
         mv cobertura-coverage.xml reports-${{ github.sha }}/
         mv test-results.xml reports-${{ github.sha }}/
         ls -lrt reports-${{ github.sha }}/

      - name: Upload to Azure Blob
        run: echo "uploading...."



